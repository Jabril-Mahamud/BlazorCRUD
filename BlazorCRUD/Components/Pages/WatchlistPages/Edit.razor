@page "/watchlist/edit"
@inject BlazorCRUD.Data.ApplicationDbContext DB
@using BlazorCRUD
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@using BlazorCRUD.Models

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>watchlist</h4>
<hr />
    @if (watchlist is null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-md-4">
                <EditForm method="post" Model="watchlist" OnValidSubmit="Updatewatchlist" FormName="edit" Enhance>
                    <DataAnnotationsValidator />
                    <ValidationSummary />
                    <input type="hidden" name="watchlist.Id" value="@watchlist.Id" />
                    <div class="mb-3">
                        <label for="content" class="form-label">Content:</label>
                        <InputText id="content" @bind-Value="watchlist.Content" class="form-control" />
                        <ValidationMessage For="() => watchlist.Content" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="sauce" class="form-label">Sauce:</label>
                        <InputText id="sauce" @bind-Value="watchlist.Sauce" class="form-control" />
                        <ValidationMessage For="() => watchlist.Sauce" class="text-danger" />
                    </div>
                    <div class="mb-3">
                        <label for="time" class="form-label">Time:</label>
                        <InputDate id="time" @bind-Value="watchlist.DateTime" class="form-control" />
                        <ValidationMessage For="() => watchlist.DateTime" class="text-danger" />
                    </div>
                    <button type="submit" class="btn btn-primary">Save</button>
                </EditForm>
            </div>
        </div>
    }

    <div>
        <a href="/watchlist">Back to List</a>
    </div>


@code {
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Watchlist? watchlist { get; set; }

    protected override async Task OnInitializedAsync()
    {
        watchlist ??= await DB.Watchlist.FirstOrDefaultAsync(m => m.Id == Id);

        if (watchlist is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task Updatewatchlist()
    {
        // Set the current date and time for the Time property
        watchlist.DateTime = DateTime.Now;

        DB.Attach(watchlist!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!watchlistExists(watchlist!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/watchlist");
    }

    bool watchlistExists(int id)
    {
        return DB.Watchlist.Any(e => e.Id == id);
    }
}
}
